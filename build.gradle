plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
}

version = mod_version
group = maven_group

base {
    archivesName = archives_base_name
}

repositories {
    maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
    maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
    maven { url = "https://api.modrinth.com/maven" } // Create Deco
    maven { url = "https://mvn.devos.one/snapshots/" } // Create, Porting Lib, Forge Tags, Milk Lib, Registrate
    maven { url = "https://mvn.devos.one/releases/" } // Porting Lib Releases
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge Config API Port
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://jitpack.io/" } // Fabric ASM
    maven { url = "https://maven.tterrag.com/" } // Flywheel
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${minecraft_version}"

    mappings(loom.layered {
        it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${qm_version}:intermediary-v2")
        it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    })

    modImplementation("net.fabricmc:fabric-loader:${fabric_loader_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")

    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_version}")

    modImplementation("maven.modrinth:create-deco:2.0.1-1.20.1-fabric")
}

processResources {
    // set up properties for filling into metadata
    Map<String, String> properties = Map.of(
            "version", version as String,
            "fabric_loader_version", fabric_loader_version,
            "fabric_api_version", fabric_api_version,
            "minecraft_version", minecraft_version,
    )
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("fabric.mod.json") {
        expand properties
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}
